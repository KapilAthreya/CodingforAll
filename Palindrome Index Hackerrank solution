/* PLease find the solution of hackerrank Plaindrome Index */
import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;
class Result {
    public static int palindromeIndex(String s) {
        int ans = -1; 
        int len = s.length();
        
        for(int i = 0 ; i < len/2;i++){
            if(s.charAt(i)!=s.charAt(len-i-1)){
                if(i+1 < len){
                    boolean ispalin = ispali(s.substring(i+1,len-i));
                    if(ispalin) return i;
                return len-i-1;
            }
            
        }
        }
    // Write your code here
return ans;
    }
public static boolean ispali(String k){
    int len  = k.length();
    for(int i = 0 ; i < len/2;i++){
        if(k.charAt(i)!=k.charAt(len-i-1)){
            return false ;
        }
    }
    return true;
}
}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int q = Integer.parseInt(bufferedReader.readLine().trim());

        IntStream.range(0, q).forEach(qItr -> {
            try {
                String s = bufferedReader.readLine();

                int result = Result.palindromeIndex(s);

                bufferedWriter.write(String.valueOf(result));
                bufferedWriter.newLine();
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        });

        bufferedReader.close();
        bufferedWriter.close();
    }
}
